import keyboards, text
from Gamee import game, constants
from config import dp, bot
from aiogram.types import LabeledPrice, FSInputFile
from aiogram import types
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
import asyncio
from databases import database
import ton_dep


class Input(StatesGroup):
    count_star = State()
class Deposit_TON(StatesGroup):
    deposit = State()
class GameState(StatesGroup):
    playing = State()

@dp.callback_query(F.data.in_(["boxes", "tops", "support"]) | F.data.startswith("Box") | F.data.startswith("back") | F.data.startswith("deposit"))
async def handling(data, state):
    info = data.data
    if info == 'deposit':
        await bot.send_message(
            data.from_user.id,
            'üíúüíô –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã üíôüíú',
            reply_markup=keyboards.tonorstars()
        )
        await data.answer()
    elif info == 'deposit_star':
        await data.message.edit_text(text =  '‚≠ê‚≠ê –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–ù. 1000, 1–∫, 10) ‚≠ê‚≠ê')
        await state.set_state(Input.count_star)
    elif info == 'deposit_TON':
        wallet_free = await database.select_wallet('select')
        user = await database.select_wallet('check', data.from_user.id)
        if user == []:
            await data.message.edit_text(text = f'‚ÄºÔ∏è –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¢–û–ù–´ –Ω–∞ –∞–¥—Ä–µ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –ú–ò–ù–£–¢, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∫–æ–∏–Ω—ã –Ω–µ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å‚ÄºÔ∏è\n\n{wallet_free[0].wallet_name}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª"\n\n–ö—É—Ä—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: 1 TON = 200‚≠ê\n\n–ï—Å–ª–∏ –∫–æ–∏–Ω—ã –≤—Å–µ –∂–µ –Ω–µ –ø—Ä–∏—à–ª–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É @aidzensolo', reply_markup=keyboards.proverka_depa())
            await database.update_wallet(wallet_free[0].wallet_name, 1, data.from_user.id)
            await asyncio.sleep(300)
            await database.update_wallet(wallet_free[0].wallet_name, 0, 0)
            await data.message.edit_text(text = '–ö–æ—à–µ–ª–µ–∫ –æ–ø–ª–∞—Ç—ã —É—Å—Ç–∞—Ä–µ–ª, –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–∑–æ–≤–∏ –Ω–æ–≤—ã–π', reply_markup=keyboards.tonorstars())
        else:
            await data.answer('‚ùå –ó–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–ø–ª–∞—Ç—É')
    elif info == 'back_to_menu':
        info_1 = await database.select_user(data.from_user.id)
        await bot.edit_message_media(media=types.InputMediaPhoto(media=FSInputFile('photo/giftly.png')),
                                     chat_id=data.message.chat.id,
                                     message_id=data.message.message_id)
        await bot.edit_message_caption(chat_id=data.message.chat.id, message_id=data.message.message_id,
                                       caption=text.menu(info_1.user_id, info_1.name, info_1.balance_star, info_1.referals, info_1.play_win, info_1.time_register, info_1.referal_amount),
                                       reply_markup=keyboards.menu(),
                                       parse_mode="HTML")
    elif info == 'boxes' or info == 'back_to_box':
        await bot.edit_message_media(media=types.InputMediaPhoto(media=FSInputFile('photo/menu.png')), chat_id=data.message.chat.id,
                                              message_id=data.message.message_id)
        await bot.edit_message_caption(chat_id=data.message.chat.id, message_id=data.message.message_id,
                                                caption=text.boxes(),
                                                reply_markup=keyboards.boxes())
    elif info == 'tops' or info == 'back_to_top':
        await data.message.edit_text(
            text='–í—ã–±–µ—Ä–∏',
            reply_markup=keyboards.tops()
        )
    elif info == 'support':
        await data.message.edit_text(
            text='–í—ã–±–µ—Ä–∏',
            reply_markup=keyboards.tops()
        )
    elif info.startswith('Box'):
        await bot.edit_media(
            caption=text.open_box(info),
            reply_markup=keyboards.open_box(info)
        )
@dp.callback_query(F.data.startswith('top'))
async def top(data):
    info = data.data
    info1 = info.split('_')[1]
    result = await database.top_users(info1)
    text_ans = f'–¢–æ–ø –ø–æ {info1}\n\n'
    for num, user in enumerate(result):
        text_ans += f"{num + 1}. {user.user_name} - {user.play_win}\n"
    await data.message.edit_text(
        text=text_ans,
        reply_markup=keyboards.back('top')
    )
@dp.callback_query(F.data == 'dep_true')
async def dep_true(data):
    answer = await ton_dep.checker(data.from_user.id)
    if answer != 'dep_unknown':
        info_old = await database.select_user(data.from_user.id)
        await database.update_user(user_id=data.from_user.id, column='balance_star',
                                   value=info_old.balance_star + sum(answer)*200)
        text = f'üíú –ù–∞—à–ª–∏ –ø–ª–∞—Ç–µ–∂ {sum(answer)} TON.\n\n{sum(answer)*200} ‚≠ê –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å\n\n–ë–∞–ª–∞–Ω—Å: {info_old.balance_star + sum(answer)*200} ‚≠ê'
        await data.message.edit_text(
            text=text,
            reply_markup=keyboards.tonorstars())
        await data.answer()
    else:
        text = 'üíî –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        await data.answer(text=text)

@dp.callback_query(F.data.startswith('replace_gift')) #–í–ê–ñ–ù–û
@dp.callback_query(F.data.startswith('take_gift'))
async def open_box(data):
    info = data.data
    if info.startswith('take_gift'):
        text = 'üíú –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã üíú'
        await game.send_default_gift(data.from_user.id, info.split('_')[2])
    else:
        price = constants.gift_price_by_id[info.split('_')[2]]
        text = f'–ü–æ–¥–∞—Ä–æ–∫ –æ–±–º–µ–Ω—è–Ω –Ω–∞ {price} ‚≠ê'
    await data.message.edit_text(
        text=text,
        reply_markup=keyboards.open_box('box_default'))

@dp.callback_query(F.data.startswith('cell'))
async def open_box(data, state):
    info_pole = await state.get_data()
    cells = info_pole.get("cells")
    text1 = text.cong_win(data.data)
    await data.message.edit_text(
        text=text1,
        reply_markup=keyboards.default_gift_choice(cells, True, data.data.split('_')[1]))
    await data.answer()
    await state.clear()

@dp.callback_query(F.data.startswith('open'))
async def open_box(data, state):
    name_box = data.data.split('_')[2].lower()
    result = await game.Game(data.from_user.id, name_box)
    if result == 'gifts_end':
        await data.message.edit_text(
            text=f'‚ÄºÔ∏è –ö–∞–∂–µ—Ç—Å—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å NFT –ø–æ–¥–∞—Ä–∫–∏ –≤ –±–æ—Ç–µ, –∞–¥–º–∏–Ω —É–∂–µ –æ–ø–æ–≤–µ—â–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ. –ó–∞–≥–ª—è–Ω–∏ —á—É—Ç—å –ø–æ–∑–∂–µ',
            reply_markup=keyboards.back('box'))
        return
    await data.message.edit_text(text = 'üíú –û—Ç–∫—Ä—ã–≤–∞–µ–º...')
    await asyncio.sleep(1)
    if not result:
        await data.message.edit_text(text=f'üíî –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤ –±–æ–∫—Å–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å.–ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è ‚Äî —É–¥–∞—á–∞ —É–∂–µ —Ä—è–¥–æ–º! –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–π! üíú',reply_markup=keyboards.open_after(data.data))
    elif result == 'default':
        res = game.random_default_gift()
        await state.set_state(GameState.playing)
        await state.update_data(cells=res)
        await data.message.edit_text(
            text=f'üíô –¢–µ–±–µ –≤—ã–ø–∞–ª –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –≤ —è—á–µ–π–∫–∞—Ö —Å–ø—Ä—è—Ç–∞–Ω—ã –ø–æ–¥–∞—Ä–∫–∏ —Ä–∞–∑–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (15‚≠ê - 100‚≠ê). –í—ã–±–µ—Ä–∏ —è—á–µ–π–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ò–õ–ò –æ–±–º–µ–Ω—è—Ç—å –ø–æ–¥–∞—Ä–æ–∫.',
            reply_markup=keyboards.default_gift_choice(res))
    else:
        if name_box == 'default':
            await data.message.edit_text(text= f'üíôüíô –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üíôüíô\n\n–í –±–æ–∫—Å–µ –±—ã–ª {result}\n\n‚ÄºÔ∏è –í–ê–ñ–ù–û! –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∑–≤–µ–∑–¥—ã –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ ‚ÄºÔ∏è  ',reply_markup=keyboards.default_gift_choice([], True, result[1]))
        else:
            await data.message.edit_text(text = f'üíúüíú –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üíúüíú\n\n–í –±–æ–∫—Å–µ –±—ã–ª NFT –ø–æ–¥–∞—Ä–æ–∫ <a href="t.me/nft/{result.name}">{result.name}</a> ‚Äî –æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!', parse_mode="HTML")
            await asyncio.sleep(1.5)
            await bot.send_message(
                data.from_user.id,
                text=text.open_box(data.data[4:]),
                reply_markup=keyboards.open_box(data.data[4:])
            )


@dp.message(Input.count_star)
async def star_dep(message, state):
    if message.text.isdigit():
        prices = [LabeledPrice(label="XTR", amount=int(message.text))]
        await bot.send_invoice(
            chat_id = message.from_user.id,
            title = f'üíú –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
            description = '‚≠ê –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É –ø–æ–º–µ–Ω—è—Ç—Å—è –Ω–∞ —á–µ–∫. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ /cancel',
            payload = 'test',
            currency = 'XTR',
            prices = prices,
            start_parameter='vip1'
        )
        await state.clear()